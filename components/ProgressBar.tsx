import { useEffect, useState } from "react";

interface Iitem {
  progressBarRef: any;
  audioPlayer: any;
  musicList: Array<{ title: string; srcMusic: string; imgSrc: string }>;
  setPlayingList: any;
  repeatSong: boolean;
  setCurrentSong: any;
  currentSong: number;
  playAnimationRef: any;
  setRepeatSong: any;
  duration: any;
  setTime: any;
  time: any;
  small?: boolean;
}
export default function ProgressBar(item: Iitem) {
  const [shuffle, setShuffle] = useState<boolean>(false);
  const repeat = () => {
    const currentTime = item.audioPlayer.current?.currentTime;
    item.setTime(currentTime);
    if (item.duration) {
      item.progressBarRef.current.value = currentTime;
      item.progressBarRef.current.style.setProperty(
        "--range-progress",
        `${(item.progressBarRef.current.value / item.duration) * 100}%`
      );
      if (item.duration === item.audioPlayer.current?.currentTime) {
        if (item.repeatSong) {
          item.setCurrentSong(item.currentSong);
        } else {
          if (item.currentSong != item.musicList.length - 1) {
            item.setCurrentSong(item.currentSong + 1);
          } else {
            item.setCurrentSong(0);
          }
        }
      }
    }

    item.playAnimationRef.current = requestAnimationFrame(repeat);
  };
  const handleProgressChange = () => {
    if (item.audioPlayer.current?.currentTime != undefined) {
      item.audioPlayer.current.currentTime = item.progressBarRef.current?.value;
    }
  };

  const formatTime = (time: any) => {
    if (time && !isNaN(time)) {
      const minutes = Math.floor(time / 60);
      const formatMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;
      const seconds = Math.floor(time % 60);
      const formatSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;
      return `${formatMinutes}:${formatSeconds}`;
    }
    return "00:00";
  };
  useEffect(() => {
    if (shuffle) {
      const randomizeArray = [...item.musicList].sort(
        () => 0.5 - Math.random()
      );
      item.setPlayingList(randomizeArray.slice(0, item.musicList.length));
    } else {
      item.setPlayingList(item.musicList);
    }
  }, [shuffle]);

  return (
    <div className="mt-1 flex w-9/12 flex-col space-y-2">
      {!item.small && (
        <div className="mb-1 flex justify-between">
          <svg
            width="18"
            height="18"
            viewBox="0 0 18 18"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            onClick={() => item.setRepeatSong(!item.repeatSong)}
          >
            <path
              d="M0.000788461 9.0009C0.00255306 7.18778 0.670321 5.44947 1.85757 4.1674C3.04481 2.88533 4.65455 2.16423 6.33357 2.16232H14.5828L14.2895 1.84649C14.1965 1.74605 14.1227 1.62681 14.0724 1.49558C14.0221 1.36435 13.9962 1.22369 13.9962 1.08165C13.9962 0.939604 14.0221 0.798951 14.0724 0.667719C14.1227 0.536488 14.1965 0.417248 14.2895 0.316807C14.3825 0.216367 14.493 0.136693 14.6145 0.0823355C14.736 0.0279776 14.8663 0 14.9978 0C15.1293 0 15.2596 0.0279776 15.3811 0.0823355C15.5026 0.136693 15.6131 0.216367 15.7061 0.316807L17.7059 2.47636C17.7991 2.57667 17.8731 2.69587 17.9236 2.82712C17.974 2.95837 18 3.09909 18 3.2412C18 3.38331 17.974 3.52403 17.9236 3.65528C17.8731 3.78653 17.7991 3.90572 17.7059 4.00604L15.7061 6.16559C15.5182 6.36844 15.2635 6.4824 14.9978 6.4824C14.7322 6.4824 14.4774 6.36844 14.2895 6.16559C14.1017 5.96274 13.9962 5.68762 13.9962 5.40075C13.9962 5.11388 14.1017 4.83876 14.2895 4.63591L14.5828 4.32187H6.33357C5.1848 4.3233 4.08347 4.81673 3.27117 5.69391C2.45887 6.57108 2.00194 7.76038 2.00061 9.0009C2.00061 9.28727 1.89527 9.56192 1.70775 9.76442C1.52023 9.96691 1.26589 10.0807 1.0007 10.0807C0.735508 10.0807 0.481176 9.96691 0.293656 9.76442C0.106136 9.56192 0.000788461 9.28727 0.000788461 9.0009ZM16.9993 7.92112C16.7341 7.92112 16.4798 8.03489 16.2923 8.23738C16.1047 8.43988 15.9994 8.71453 15.9994 9.0009C15.9981 10.2414 15.5411 11.4307 14.7288 12.3079C13.9165 13.1851 12.8152 13.6785 11.6664 13.6799H3.41716L3.71046 13.3641C3.80347 13.2637 3.87726 13.1444 3.92759 13.0132C3.97793 12.8819 4.00384 12.7413 4.00384 12.5993C4.00384 12.4572 3.97793 12.3166 3.92759 12.1853C3.87726 12.0541 3.80347 11.9349 3.71046 11.8344C3.61745 11.734 3.50703 11.6543 3.38551 11.5999C3.26398 11.5456 3.13373 11.5176 3.00219 11.5176C2.87065 11.5176 2.7404 11.5456 2.61888 11.5999C2.49735 11.6543 2.38693 11.734 2.29392 11.8344L0.294096 13.994C0.200878 14.0943 0.126914 14.2135 0.0764462 14.3447C0.0259786 14.476 0 14.6167 0 14.7588C0 14.9009 0.0259786 15.0416 0.0764462 15.1729C0.126914 15.3041 0.200878 15.4233 0.294096 15.5236L2.29392 17.6832C2.38693 17.7836 2.49735 17.8633 2.61888 17.9177C2.7404 17.972 2.87065 18 3.00219 18C3.13373 18 3.26398 17.972 3.38551 17.9177C3.50703 17.8633 3.61745 17.7836 3.71046 17.6832C3.80347 17.5828 3.87726 17.4635 3.92759 17.3323C3.97793 17.201 4.00384 17.0604 4.00384 16.9184C4.00384 16.7763 3.97793 16.6357 3.92759 16.5044C3.87726 16.3732 3.80347 16.254 3.71046 16.1535L3.41716 15.8395H11.6664C13.3454 15.8376 14.9552 15.1165 16.1424 13.8344C17.3297 12.5523 17.9974 10.814 17.9992 9.0009C17.9992 8.71453 17.8939 8.43988 17.7063 8.23738C17.5188 8.03489 17.2645 7.92112 16.9993 7.92112Z"
              className={`${
                item.repeatSong
                  ? "fill-black  dark:fill-red-600"
                  : "fill-[#424040]  dark:fill-white"
              }`}
            />
          </svg>
          <svg
            width="22"
            height="18"
            viewBox="0 0 22 18"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            onClick={() => setShuffle(!shuffle)}
          >
            <path
              d="M21.761 14.1481C21.8368 14.2241 21.8969 14.3144 21.9379 14.4137C21.9789 14.513 22 14.6195 22 14.727C22 14.8345 21.9789 14.941 21.9379 15.0403C21.8969 15.1396 21.8368 15.2298 21.761 15.3058L19.3167 17.7602C19.1638 17.9138 18.9564 18 18.7402 18C18.524 18 18.3166 17.9138 18.1637 17.7602C18.0108 17.6067 17.9249 17.3985 17.9249 17.1814C17.9249 16.9643 18.0108 16.7561 18.1637 16.6026L19.2179 15.5451H15.0859C14.8268 15.5448 14.5716 15.4825 14.3413 15.3633C14.111 15.2442 13.9124 15.0716 13.7618 14.8599L6.09871 4.09116H0.814791C0.598695 4.09116 0.39145 4.00496 0.238647 3.85153C0.0858438 3.6981 0 3.49 0 3.27302C0 3.05603 0.0858438 2.84793 0.238647 2.6945C0.39145 2.54107 0.598695 2.45488 0.814791 2.45488H6.09871C6.35776 2.45519 6.613 2.51752 6.84326 2.63668C7.07352 2.75584 7.27218 2.92841 7.42275 3.14007L15.0859 13.9088H19.2179L18.1637 12.8514C18.0108 12.6979 17.9249 12.4897 17.9249 12.2726C17.9249 12.0555 18.0108 11.8472 18.1637 11.6937C18.3166 11.5402 18.524 11.454 18.7402 11.454C18.9564 11.454 19.1638 11.5402 19.3167 11.6937L21.761 14.1481ZM12.12 6.85238C12.2071 6.91483 12.3056 6.95945 12.4098 6.98369C12.514 7.00793 12.622 7.01131 12.7276 6.99365C12.8331 6.97599 12.9342 6.93762 13.0249 6.88074C13.1157 6.82387 13.1945 6.74959 13.2567 6.66216L15.0899 4.0932H19.2219L18.1637 5.1486C18.088 5.22462 18.028 5.31486 17.987 5.41417C17.946 5.51349 17.9249 5.61994 17.9249 5.72744C17.9249 5.83494 17.946 5.94138 17.987 6.0407C18.028 6.14002 18.088 6.23026 18.1637 6.30627C18.3166 6.45979 18.524 6.54603 18.7402 6.54603C18.8473 6.54603 18.9533 6.52486 19.0522 6.48372C19.1511 6.44258 19.241 6.38229 19.3167 6.30627L21.761 3.85185C21.8368 3.77587 21.8969 3.68564 21.9379 3.58632C21.9789 3.48699 22 3.38053 22 3.27302C22 3.1655 21.9789 3.05904 21.9379 2.95972C21.8969 2.8604 21.8368 2.77016 21.761 2.69418L19.3167 0.239761C19.1638 0.0862446 18.9564 -4.27966e-09 18.7402 0C18.524 4.27966e-09 18.3166 0.0862446 18.1637 0.239761C18.0108 0.393277 17.9249 0.60149 17.9249 0.818595C17.9249 1.0357 18.0108 1.24391 18.1637 1.39743L19.2179 2.45488H15.0859C14.8268 2.45519 14.5716 2.51752 14.3413 2.63668C14.111 2.75584 13.9124 2.92841 13.7618 3.14007L11.9316 5.70903C11.869 5.79646 11.8243 5.89544 11.7999 6.00028C11.7755 6.10512 11.7719 6.21376 11.7894 6.31998C11.8069 6.4262 11.8452 6.5279 11.9019 6.61926C11.9586 6.71062 12.0327 6.78984 12.12 6.85238ZM9.06455 11.1476C8.97748 11.0852 8.87901 11.0405 8.77477 11.0163C8.67052 10.9921 8.56254 10.9887 8.457 11.0063C8.35145 11.024 8.2504 11.0624 8.15962 11.1193C8.06884 11.1761 7.99011 11.2504 7.92792 11.3378L6.09871 13.9088H0.814791C0.598695 13.9088 0.39145 13.995 0.238647 14.1485C0.0858438 14.3019 0 14.51 0 14.727C0 14.944 0.0858438 15.1521 0.238647 15.3055C0.39145 15.4589 0.598695 15.5451 0.814791 15.5451H6.09871C6.35776 15.5448 6.613 15.4825 6.84326 15.3633C7.07352 15.2442 7.27218 15.0716 7.42275 14.8599L9.25093 12.291C9.3136 12.2037 9.3585 12.1048 9.38305 12C9.4076 11.8953 9.41133 11.7867 9.39401 11.6805C9.3767 11.5743 9.33869 11.4725 9.28215 11.3811C9.22562 11.2896 9.15167 11.2103 9.06455 11.1476Z"
              className={`${
                shuffle
                  ? "fill-black  dark:fill-red-600"
                  : "fill-[#424040]  dark:fill-white"
              }`}
            />
          </svg>
        </div>
      )}
      <input
        id="myinput"
        type="range"
        dir="ltr"
        ref={item.progressBarRef}
        defaultValue="0"
        onChange={handleProgressChange}
        className="accent-red-600"
      />
      <div className="flex justify-between font-semibold dark:text-white">
        <span>{formatTime(item.time)}</span>
        <span>{formatTime(item.duration)}</span>
      </div>
    </div>
  );
}
